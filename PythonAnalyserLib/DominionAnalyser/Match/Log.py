class Log:
    """class to represent the data structure of the game log

    a log is basically formed by a list of Turn"""

    def __init__(self, document):
        self.turns = [Turn(t) for t in document]


class Turn:
    """ class representing the turn data structure

    a Turn has a number and a list of PlayerMove"""

    def __init__(self, document):
        self.number = document.get("turn")
        self.players_moves = [PlayerMove(p)
                              for p in document.get("playersMove")]

    def to_doc(self):
        document = {"turn": self.number,
                    "playersMove": [p.to_doc() for p in self.players_moves]}
        return document


class PlayerMove:
    """class representing the PlayerMove data-structure

    a PlayerMove is composed by the name of the player and
    a list of Play made by the player this turn"""

    def __init__(self, document):
        self.name = document.get("name")
        self.plays = [Play(p) for p in document.get("plays")]

    def to_doc(self):
        document = {"name": self.name,
                    "plays": [p.to_doc() for p in self.plays]}
        return document


class Play:
    """class representing a Play data-structure

    a Play is composed by a list of cards used in the play the type
    of the play and a  list of Play representing the Plays generated by
    this Play"""

    def __init__(self, document):
        self.cards = document.get("cards")
        self.move_type = document.get("type")
        if document.get("following"):
            self.following = [Play(p) for p in document.get("following")]
        else:
            self.following = []

    def to_doc(self):
        document = {"cards": self.cards,
                    "type": self.move_type,
                    "following": [f.to_doc() for f in self.following]}
        return document
